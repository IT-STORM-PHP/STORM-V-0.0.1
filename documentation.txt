üöÄ Exemples d'utilisation : Des Route
1Ô∏è‚É£ D√©finir des routes simples:

use App\Routes\Route;
use App\Controllers\UserController;

Route::get('/home', function () {
    echo "Bienvenue sur la page d'accueil";
});

Route::get('/users/{id}', [UserController::class, 'show']);


2Ô∏è‚É£ Rediriger vers une m√©thode sp√©cifique:
Route::post('/users/create', [UserController::class, 'create']);

3Ô∏è‚É£ Ajouter un middleware pour une route : (S√©curise l'url et empeche un utilisateur non connect√© d'y acc√©dder)
Route::beforeMiddleware(['/dashboard', '/uneautreroute'], function () {
    if (!isset($_SESSION['user'])) {
        header("Location: /login");
        exit();
    }
});


Route::get('/dashboard', function () {
    echo "Bienvenue sur votre tableau de bord";
});





Documentation de la classe View

La classe View est une classe utilitaire permettant de g√©rer l'affichage des vues, les redirections, les r√©ponses JSON, les messages flash, la gestion des cookies, les pages d'erreur et la pagination.

1. Affichage des vues
render($path, $dt = [])
Affiche une vue dynamique.
Param√®tres :

$path (string) : Le chemin de la vue (sans l'extension .php).
$dt (array) : Les donn√©es √† passer √† la vue.
Exemple :


View::render('home', ['title' => 'Accueil']);
renderWithLayout(string $layout, string $template, array $data = [])
Affiche une vue en utilisant un layout.

Param√®tres :

$layout (string) : Le fichier du layout (ex: main).
$template (string) : Le fichier de la vue (ex: home).
$data (array) : Donn√©es pass√©es √† la vue.
Exemple :


View::renderWithLayout('main', 'home', ['title' => 'Accueil']);
2. Redirection
redirect(string $url)
Redirige l'utilisateur vers une URL donn√©e.

Param√®tres :

$url (string) : L'URL vers laquelle rediriger.
Exemple :


View::redirect('https://example.com');
3. R√©ponse JSON
jsonResponse(array $data, int $status = 200)
Retourne une r√©ponse JSON structur√©e avec un code HTTP sp√©cifique.

Param√®tres :

$data (array) : Les donn√©es √† encoder en JSON.
$status (int) : Le code HTTP de r√©ponse (par d√©faut 200).
Exemple :


View::jsonResponse(['message' => 'Succ√®s'], 200);
4. Gestion des messages flash (sessions)
setFlash(string $key, string $message)
Stocke un message flash en session.

Param√®tres :

$key (string) : La cl√© du message.
$message (string) : Le message √† stocker.
Exemple :


View::setFlash('success', 'Op√©ration r√©ussie !');
getFlash(string $key): ?string
R√©cup√®re un message flash et le supprime apr√®s r√©cup√©ration.

Param√®tres :

$key (string) : La cl√© du message √† r√©cup√©rer.
Exemple :


$message = View::getFlash('success');
5. Gestion des cookies
setCookie(string $name, string $value, int $expire = 3600, string $path = "/", bool $secure = false, bool $httponly = true)
D√©finit un cookie s√©curis√©.

Param√®tres :

$name (string) : Nom du cookie.
$value (string) : Valeur du cookie.
$expire (int) : Dur√©e en secondes (par d√©faut 3600).
$path (string) : Chemin de validit√© du cookie.
$secure (bool) : true si le cookie ne doit √™tre transmis que via HTTPS.
$httponly (bool) : true si le cookie doit √™tre accessible uniquement via HTTP.
Exemple :


View::setCookie('user', 'JohnDoe', 86400);
getCookie(string $name): ?string
R√©cup√®re un cookie.

Param√®tres :

$name (string) : Nom du cookie.
Exemple :


$user = View::getCookie('user');
6. Gestion des erreurs
renderErrorPage(int $code = 404, string $message = "Page not found")
Affiche une page d'erreur et d√©finit le code HTTP.

Param√®tres :

$code (int) : Code HTTP de l'erreur (ex: 404, 500).
$message (string) : Message d'erreur √† afficher.
Exemple :


View::renderErrorPage(403, "Acc√®s interdit");
7. T√©l√©chargement de fichiers
downloadFile(string $filePath, ?string $fileName = null)
Permet de t√©l√©charger un fichier.

Param√®tres :

$filePath (string) : Chemin du fichier √† t√©l√©charger.
$fileName (string|null) : Nom du fichier √† afficher lors du t√©l√©chargement.
Exemple :


View::downloadFile('/path/to/file.pdf', 'document.pdf');
8. Pagination
paginate(array $items, int $page = 1, int $perPage = 10): array
Paginate un tableau de donn√©es.

Param√®tres :

$items (array) : Liste des √©l√©ments √† paginer.
$page (int) : Num√©ro de la page actuelle.
$perPage (int) : Nombre d'√©l√©ments par page.
Retourne :

Un tableau contenant data et pagination.
Exemple :


$data = range(1, 100); // Tableau de 100 √©l√©ments
$pagination = View::paginate($data, 2, 10);

print_r($pagination);