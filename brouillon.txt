<?php

namespace App\Console\Commands;

use App\Models\Database;
use PDO;

class MakeLogin
{
    public static function run()
    {
        echo "\033[32mQuelle table voulez-vous utiliser pour l'authentification ? \033[0m";
        $table = trim(fgets(STDIN));

        // Connexion à la base de données
        $pdo = Database::getInstance()->getConnection();

        // Vérifier si la table existe
        $stmt = $pdo->prepare("SHOW TABLES LIKE ?");
        $stmt->execute([$table]);
        if (!$stmt->fetch()) {
            echo "\033[31mErreur : La table '$table' n'existe pas.\033[0m\n";
            return;
        }

        // Récupérer les champs de la table
        $stmt = $pdo->query("DESCRIBE $table");
        $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);

        echo "Table trouvée avec les champs suivants :\n";
        foreach ($columns as $col) {
            echo " - {$col['Field']}\n";
        }

        // Identifier la clé primaire
        $primaryKey = null;
        foreach ($columns as $col) {
            if ($col['Key'] === 'PRI') {
                $primaryKey = $col['Field'];
                break;
            }
        }

        // Demander le champ de login
        echo "\033[32mQuel champ utiliser pour le login ? \033[0m";
        $loginField = trim(fgets(STDIN));
        if (!in_array($loginField, array_column($columns, 'Field'))) {
            echo "\033[31mErreur : Le champ '$loginField' n'existe pas dans la table.\033[0m\n";
            return;
        }

        // Demander le champ de mot de passe
        echo "\033[32mQuel champ utiliser pour le mot de passe ? \033[0m";
        $passwordField = trim(fgets(STDIN));
        if (!in_array($passwordField, array_column($columns, 'Field'))) {
            echo "\033[31mErreur : Le champ '$passwordField' n'existe pas dans la table.\033[0m\n";
            return;
        }

        // Exclure les champs non nécessaires pour l'inscription
        $excludedFields = ['created_at', 'updated_at'];
        if ($primaryKey) {
            $excludedFields[] = $primaryKey;
        }

        // Exclure les colonnes commençant par "id"
        foreach ($columns as $col) {
            if (strpos($col['Field'], 'id') === 0) {
                $excludedFields[] = $col['Field'];
            }
        }

        // Définir les champs à insérer
        $insertFields = array_diff(array_column($columns, 'Field'), $excludedFields);
        $insertFieldsString = implode(', ', $insertFields);
        $insertPlaceholders = ':' . implode(', :', $insertFields);

        // Génération du modèle
        $modelContent = "<?php

namespace App\\Models\\Login;

use PDO;
use App\\Models\\Model;

class " . ucfirst($table) . " extends Model
{
    private \$pdo;

    public function __construct()
    {
        \$this->pdo = \\App\\Models\\Database::getInstance()->getConnection();
    }

    public function login(\$login, \$password)
    {
        \$sql = \"SELECT * FROM $table WHERE $loginField = :login\";
        \$stmt = \$this->pdo->prepare(\$sql);
        \$stmt->bindParam(':login', \$login);
        \$stmt->execute();
        \$user = \$stmt->fetch(PDO::FETCH_ASSOC);

        if (!\$user) {
            return false;
        }

        if (!isset(\$user['$passwordField'])) {
            throw new \\Exception('Champ mot de passe invalide.');
        }

        if (password_verify(\$password, \$user['$passwordField'])) {
            return \$user;
        }
        return false;
    }

    public function register(\$data)
    {
        // Hachage du mot de passe avant l'insertion
        if (isset(\$data['$passwordField'])) {
            \$data['$passwordField'] = password_hash(\$data['$passwordField'], PASSWORD_BCRYPT);
        }

        \$sql = \"INSERT INTO $table ($insertFieldsString) VALUES ($insertPlaceholders)\";
        \$stmt = \$this->pdo->prepare(\$sql);
        foreach (\$data as \$key => \$value) {
            \$stmt->bindValue(':' . \$key, \$value);
        }
        return \$stmt->execute();
    }
}";

        $modelDir = __DIR__ . "/../../Models/Login/";
        if (!is_dir($modelDir)) {
            mkdir($modelDir, 0777, true);
        }
        $modelPath = $modelDir . ucfirst($table) . ".php";
        file_put_contents($modelPath, $modelContent);
        echo "\033[32mModèle généré : $modelPath\033[0m\n";

        // Génération du contrôleur avec attributs dynamiques
        $controllerAttributes = "";
        $controllerAssignments = "";
        foreach ($columns as $col) {
            $field = $col['Field'];
            // Exclure les champs non nécessaires
            if (!in_array($field, $excludedFields)) {
                $controllerAttributes .= "    public \$$field;\n";
                $controllerAssignments .= "        \$this->$field = \$this->request->get('$field');\n";
            }
        }

        $controllerContent = "<?php

namespace App\\Controllers\\Login;

use App\\Models\\Login\\" . ucfirst($table) . ";
use App\\Controllers\\Controller;
use App\\Http\\Request;

class LoginController extends Controller
{
$controllerAttributes
    private \$model;
    private \$request;
    
    public function __construct()
    {
        \$this->model = new " . ucfirst($table) . "();
        \$this->request = new Request();
$controllerAssignments
    }

    public function login()
    {
        // Vérifier la présence des champs essentiels
        if (empty(\$this->$loginField) || empty(\$this->$passwordField)) {
            echo 'Veuillez fournir un identifiant et un mot de passe.';
            return;
        }

        // Appeler le modèle pour vérifier les identifiants
        \$user = \$this->model->login(\$this->$loginField, \$this->$passwordField);
        
        if (\$user) {
            session_start();
            \$_SESSION['user'] = \$user;
            echo \"Bienvenue \" . \$user['$loginField'];
        } else {
            echo 'Identifiants incorrects';
        }
    }

    public function register()
    {
        \$data = [];
        
        // Remplir dynamiquement les champs à partir des attributs du contrôleur
        foreach (get_object_vars(\$this) as \$key => \$value) {
            if (!in_array(\$key, ['model', 'request'])) {
                \$data[\$key] = \$value;
            }
        }

        // Vérifier la présence des champs essentiels
        if (empty(\$this->$loginField) || empty(\$this->$passwordField)) {
            echo 'Veuillez fournir un identifiant et un mot de passe.';
            return;
        }

        // Appeler la méthode register du modèle pour enregistrer l'utilisateur
        \$user = \$this->model->register(\$data);
        
        if (\$user) {
            session_start();
            \$_SESSION['user'] = \$user;
            echo 'Enregistrement effectué avec succès;
        } else {
            echo 'Erreur lors de l\'enregistrement.';
        }
    }
}
";

        $controllerDir = __DIR__ . "/../../Controllers/Login/";
        if (!is_dir($controllerDir)) {
            mkdir($controllerDir, 0777, true);
        }

        file_put_contents($controllerDir . "LoginController.php", $controllerContent);
        echo "\033[32mContrôleur généré : $controllerDir" . "LoginController.php\033[0m\n";
    }
}
